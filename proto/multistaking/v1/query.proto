syntax = "proto3";

package multistaking.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/staking/v1beta1/staking.proto";

import "cosmos/msg/v1/msg.proto";
import "multistaking/v1/delegation.proto";

option go_package = "github.com/realiotech/multi-staking/x/multi-staking/types";

service Query {
  rpc BondTokenWeight(QueryBondTokenWeightRequest)
      returns (QueryBondTokenWeightResponse) {
    option (google.api.http) = {
      get : "/realio/multistaking/v1/bond_token_weight/{token_denom}"
    };
  }

  rpc ValidatorAllowedToken(QueryValidatorAllowedTokenRequest)
      returns (QueryValidatorAllowedTokenResponse) {
    option (google.api.http) = {
      get : "/realio/multistaking/v1/validator_allowed_token/{operator_address}"
    };
  }

  rpc MultiStakingLock(QueryMultiStakingLockRequest)
      returns (QueryMultiStakingLockResponse) {
    option (google.api.http) = {
      get : "/realio/multistaking/v1/multi_staking_lock/"
            "{multi_staking_lock_id}"
    };
  };
}

message QueryBondTokenWeightRequest { string token_denom = 1; }

message QueryBondTokenWeightResponse {
  string weight = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  bool is_set = 2;
}

message QueryValidatorAllowedTokenRequest {
  string operator_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

message QueryValidatorAllowedTokenResponse { string denom = 1; }

message QueryMultiStakingLockRequest { bytes multi_staking_lock_id = 1; }

message QueryMultiStakingLockResponse {
  MultiStakingLock multi_staking_lock = 1;
  bool found = 2;
}
